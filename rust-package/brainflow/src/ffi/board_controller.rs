/* automatically generated by rust-bindgen 0.59.1 */

#![allow(non_camel_case_types)]

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNINativeInterface {
    _unused: [u8; 0],
}
pub type JNIEnv = *const JNINativeInterface;
extern crate libloading;
pub struct BoardController {
    __library: ::libloading::Library,
    pub get_board_descr: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            board_descr: *mut ::std::os::raw::c_char,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_sampling_rate: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            sampling_rate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_package_num_channel: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            package_num_channel: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_timestamp_channel: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            timestamp_channel: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_marker_channel: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            marker_channel: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_battery_channel: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            battery_channel: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_num_rows: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            num_rows: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_eeg_names: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            eeg_names: *mut ::std::os::raw::c_char,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_exg_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            exg_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_eeg_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            eeg_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_emg_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            emg_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_ecg_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            ecg_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_eog_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            eog_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_ppg_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            ppg_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_eda_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            eda_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_accel_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            accel_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_analog_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            analog_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_gyro_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            gyro_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_other_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            other_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_temperature_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            temperature_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_resistance_channels: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            resistance_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_device_name: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            name: *mut ::std::os::raw::c_char,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub prepare_session: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub start_stream: Result<
        unsafe extern "C" fn(
            buffer_size: ::std::os::raw::c_int,
            streamer_params: *const ::std::os::raw::c_char,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub stop_stream: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub release_session: Result<
        unsafe extern "C" fn(
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_current_board_data: Result<
        unsafe extern "C" fn(
            num_samples: ::std::os::raw::c_int,
            data_buf: *mut f64,
            returned_samples: *mut ::std::os::raw::c_int,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_board_data_count: Result<
        unsafe extern "C" fn(
            result: *mut ::std::os::raw::c_int,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_board_data: Result<
        unsafe extern "C" fn(
            data_count: ::std::os::raw::c_int,
            data_buf: *mut f64,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub config_board: Result<
        unsafe extern "C" fn(
            config: *mut ::std::os::raw::c_char,
            response: *mut ::std::os::raw::c_char,
            response_len: *mut ::std::os::raw::c_int,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub is_prepared: Result<
        unsafe extern "C" fn(
            prepared: *mut ::std::os::raw::c_int,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub insert_marker: Result<
        unsafe extern "C" fn(
            marker_value: f64,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub set_log_level: Result<
        unsafe extern "C" fn(log_level: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub set_log_file: Result<
        unsafe extern "C" fn(log_file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub log_message: Result<
        unsafe extern "C" fn(
            log_level: ::std::os::raw::c_int,
            message: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub java_set_jnienv: Result<
        unsafe extern "C" fn(java_jnienv: *mut JNIEnv) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
}
impl BoardController {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let get_board_descr = __library.get(b"get_board_descr\0").map(|sym| *sym);
        let get_sampling_rate = __library.get(b"get_sampling_rate\0").map(|sym| *sym);
        let get_package_num_channel = __library.get(b"get_package_num_channel\0").map(|sym| *sym);
        let get_timestamp_channel = __library.get(b"get_timestamp_channel\0").map(|sym| *sym);
        let get_marker_channel = __library.get(b"get_marker_channel\0").map(|sym| *sym);
        let get_battery_channel = __library.get(b"get_battery_channel\0").map(|sym| *sym);
        let get_num_rows = __library.get(b"get_num_rows\0").map(|sym| *sym);
        let get_eeg_names = __library.get(b"get_eeg_names\0").map(|sym| *sym);
        let get_exg_channels = __library.get(b"get_exg_channels\0").map(|sym| *sym);
        let get_eeg_channels = __library.get(b"get_eeg_channels\0").map(|sym| *sym);
        let get_emg_channels = __library.get(b"get_emg_channels\0").map(|sym| *sym);
        let get_ecg_channels = __library.get(b"get_ecg_channels\0").map(|sym| *sym);
        let get_eog_channels = __library.get(b"get_eog_channels\0").map(|sym| *sym);
        let get_ppg_channels = __library.get(b"get_ppg_channels\0").map(|sym| *sym);
        let get_eda_channels = __library.get(b"get_eda_channels\0").map(|sym| *sym);
        let get_accel_channels = __library.get(b"get_accel_channels\0").map(|sym| *sym);
        let get_analog_channels = __library.get(b"get_analog_channels\0").map(|sym| *sym);
        let get_gyro_channels = __library.get(b"get_gyro_channels\0").map(|sym| *sym);
        let get_other_channels = __library.get(b"get_other_channels\0").map(|sym| *sym);
        let get_temperature_channels = __library.get(b"get_temperature_channels\0").map(|sym| *sym);
        let get_resistance_channels = __library.get(b"get_resistance_channels\0").map(|sym| *sym);
        let get_device_name = __library.get(b"get_device_name\0").map(|sym| *sym);
        let prepare_session = __library.get(b"prepare_session\0").map(|sym| *sym);
        let start_stream = __library.get(b"start_stream\0").map(|sym| *sym);
        let stop_stream = __library.get(b"stop_stream\0").map(|sym| *sym);
        let release_session = __library.get(b"release_session\0").map(|sym| *sym);
        let get_current_board_data = __library.get(b"get_current_board_data\0").map(|sym| *sym);
        let get_board_data_count = __library.get(b"get_board_data_count\0").map(|sym| *sym);
        let get_board_data = __library.get(b"get_board_data\0").map(|sym| *sym);
        let config_board = __library.get(b"config_board\0").map(|sym| *sym);
        let is_prepared = __library.get(b"is_prepared\0").map(|sym| *sym);
        let insert_marker = __library.get(b"insert_marker\0").map(|sym| *sym);
        let set_log_level = __library.get(b"set_log_level\0").map(|sym| *sym);
        let set_log_file = __library.get(b"set_log_file\0").map(|sym| *sym);
        let log_message = __library.get(b"log_message\0").map(|sym| *sym);
        let java_set_jnienv = __library.get(b"java_set_jnienv\0").map(|sym| *sym);
        Ok(BoardController {
            __library,
            get_board_descr,
            get_sampling_rate,
            get_package_num_channel,
            get_timestamp_channel,
            get_marker_channel,
            get_battery_channel,
            get_num_rows,
            get_eeg_names,
            get_exg_channels,
            get_eeg_channels,
            get_emg_channels,
            get_ecg_channels,
            get_eog_channels,
            get_ppg_channels,
            get_eda_channels,
            get_accel_channels,
            get_analog_channels,
            get_gyro_channels,
            get_other_channels,
            get_temperature_channels,
            get_resistance_channels,
            get_device_name,
            prepare_session,
            start_stream,
            stop_stream,
            release_session,
            get_current_board_data,
            get_board_data_count,
            get_board_data,
            config_board,
            is_prepared,
            insert_marker,
            set_log_level,
            set_log_file,
            log_message,
            java_set_jnienv,
        })
    }
    pub unsafe fn get_board_descr(
        &self,
        board_id: ::std::os::raw::c_int,
        board_descr: *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_board_descr
            .as_ref()
            .expect("Expected function, got error."))(board_id, board_descr, len)
    }
    pub unsafe fn get_sampling_rate(
        &self,
        board_id: ::std::os::raw::c_int,
        sampling_rate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_sampling_rate
            .as_ref()
            .expect("Expected function, got error."))(board_id, sampling_rate)
    }
    pub unsafe fn get_package_num_channel(
        &self,
        board_id: ::std::os::raw::c_int,
        package_num_channel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_package_num_channel
            .as_ref()
            .expect("Expected function, got error."))(board_id, package_num_channel)
    }
    pub unsafe fn get_timestamp_channel(
        &self,
        board_id: ::std::os::raw::c_int,
        timestamp_channel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_timestamp_channel
            .as_ref()
            .expect("Expected function, got error."))(board_id, timestamp_channel)
    }
    pub unsafe fn get_marker_channel(
        &self,
        board_id: ::std::os::raw::c_int,
        marker_channel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_marker_channel
            .as_ref()
            .expect("Expected function, got error."))(board_id, marker_channel)
    }
    pub unsafe fn get_battery_channel(
        &self,
        board_id: ::std::os::raw::c_int,
        battery_channel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_battery_channel
            .as_ref()
            .expect("Expected function, got error."))(board_id, battery_channel)
    }
    pub unsafe fn get_num_rows(
        &self,
        board_id: ::std::os::raw::c_int,
        num_rows: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_num_rows
            .as_ref()
            .expect("Expected function, got error."))(board_id, num_rows)
    }
    pub unsafe fn get_eeg_names(
        &self,
        board_id: ::std::os::raw::c_int,
        eeg_names: *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_eeg_names
            .as_ref()
            .expect("Expected function, got error."))(board_id, eeg_names, len)
    }
    pub unsafe fn get_exg_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        exg_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_exg_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, exg_channels, len)
    }
    pub unsafe fn get_eeg_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        eeg_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_eeg_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, eeg_channels, len)
    }
    pub unsafe fn get_emg_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        emg_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_emg_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, emg_channels, len)
    }
    pub unsafe fn get_ecg_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        ecg_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_ecg_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, ecg_channels, len)
    }
    pub unsafe fn get_eog_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        eog_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_eog_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, eog_channels, len)
    }
    pub unsafe fn get_ppg_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        ppg_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_ppg_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, ppg_channels, len)
    }
    pub unsafe fn get_eda_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        eda_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_eda_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, eda_channels, len)
    }
    pub unsafe fn get_accel_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        accel_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_accel_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, accel_channels, len)
    }
    pub unsafe fn get_analog_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        analog_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_analog_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, analog_channels, len)
    }
    pub unsafe fn get_gyro_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        gyro_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_gyro_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, gyro_channels, len)
    }
    pub unsafe fn get_other_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        other_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_other_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, other_channels, len)
    }
    pub unsafe fn get_temperature_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        temperature_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_temperature_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, temperature_channels, len)
    }
    pub unsafe fn get_resistance_channels(
        &self,
        board_id: ::std::os::raw::c_int,
        resistance_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_resistance_channels
            .as_ref()
            .expect("Expected function, got error."))(board_id, resistance_channels, len)
    }
    pub unsafe fn get_device_name(
        &self,
        board_id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .get_device_name
            .as_ref()
            .expect("Expected function, got error."))(board_id, name, len)
    }
    pub unsafe fn prepare_session(
        &self,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .prepare_session
            .as_ref()
            .expect("Expected function, got error."))(board_id, json_brainflow_input_params)
    }
    pub unsafe fn start_stream(
        &self,
        buffer_size: ::std::os::raw::c_int,
        streamer_params: *const ::std::os::raw::c_char,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .start_stream
            .as_ref()
            .expect("Expected function, got error."))(
            buffer_size,
            streamer_params,
            board_id,
            json_brainflow_input_params,
        )
    }
    pub unsafe fn stop_stream(
        &self,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .stop_stream
            .as_ref()
            .expect("Expected function, got error."))(board_id, json_brainflow_input_params)
    }
    pub unsafe fn release_session(
        &self,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .release_session
            .as_ref()
            .expect("Expected function, got error."))(board_id, json_brainflow_input_params)
    }
    pub unsafe fn get_current_board_data(
        &self,
        num_samples: ::std::os::raw::c_int,
        data_buf: *mut f64,
        returned_samples: *mut ::std::os::raw::c_int,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .get_current_board_data
            .as_ref()
            .expect("Expected function, got error."))(
            num_samples,
            data_buf,
            returned_samples,
            board_id,
            json_brainflow_input_params,
        )
    }
    pub unsafe fn get_board_data_count(
        &self,
        result: *mut ::std::os::raw::c_int,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .get_board_data_count
            .as_ref()
            .expect("Expected function, got error."))(
            result, board_id, json_brainflow_input_params
        )
    }
    pub unsafe fn get_board_data(
        &self,
        data_count: ::std::os::raw::c_int,
        data_buf: *mut f64,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .get_board_data
            .as_ref()
            .expect("Expected function, got error."))(
            data_count,
            data_buf,
            board_id,
            json_brainflow_input_params,
        )
    }
    pub unsafe fn config_board(
        &self,
        config: *mut ::std::os::raw::c_char,
        response: *mut ::std::os::raw::c_char,
        response_len: *mut ::std::os::raw::c_int,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .config_board
            .as_ref()
            .expect("Expected function, got error."))(
            config,
            response,
            response_len,
            board_id,
            json_brainflow_input_params,
        )
    }
    pub unsafe fn is_prepared(
        &self,
        prepared: *mut ::std::os::raw::c_int,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .is_prepared
            .as_ref()
            .expect("Expected function, got error."))(
            prepared,
            board_id,
            json_brainflow_input_params,
        )
    }
    pub unsafe fn insert_marker(
        &self,
        marker_value: f64,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .insert_marker
            .as_ref()
            .expect("Expected function, got error."))(
            marker_value,
            board_id,
            json_brainflow_input_params,
        )
    }
    pub unsafe fn set_log_level(&self, log_level: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .set_log_level
            .as_ref()
            .expect("Expected function, got error."))(log_level)
    }
    pub unsafe fn set_log_file(
        &self,
        log_file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .set_log_file
            .as_ref()
            .expect("Expected function, got error."))(log_file)
    }
    pub unsafe fn log_message(
        &self,
        log_level: ::std::os::raw::c_int,
        message: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .log_message
            .as_ref()
            .expect("Expected function, got error."))(log_level, message)
    }
    pub unsafe fn java_set_jnienv(&self, java_jnienv: *mut JNIEnv) -> ::std::os::raw::c_int {
        (self
            .java_set_jnienv
            .as_ref()
            .expect("Expected function, got error."))(java_jnienv)
    }
}
