/* automatically generated by rust-bindgen 0.59.1 */

#![allow(non_camel_case_types)]


#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BrainFlowExitCodes {
    STATUS_OK = 0,
    PORT_ALREADY_OPEN_ERROR = 1,
    UNABLE_TO_OPEN_PORT_ERROR = 2,
    SET_PORT_ERROR = 3,
    BOARD_WRITE_ERROR = 4,
    INCOMMING_MSG_ERROR = 5,
    INITIAL_MSG_ERROR = 6,
    BOARD_NOT_READY_ERROR = 7,
    STREAM_ALREADY_RUN_ERROR = 8,
    INVALID_BUFFER_SIZE_ERROR = 9,
    STREAM_THREAD_ERROR = 10,
    STREAM_THREAD_IS_NOT_RUNNING = 11,
    EMPTY_BUFFER_ERROR = 12,
    INVALID_ARGUMENTS_ERROR = 13,
    UNSUPPORTED_BOARD_ERROR = 14,
    BOARD_NOT_CREATED_ERROR = 15,
    ANOTHER_BOARD_IS_CREATED_ERROR = 16,
    GENERAL_ERROR = 17,
    SYNC_TIMEOUT_ERROR = 18,
    JSON_NOT_FOUND_ERROR = 19,
    NO_SUCH_DATA_IN_JSON_ERROR = 20,
    CLASSIFIER_IS_NOT_PREPARED_ERROR = 21,
    ANOTHER_CLASSIFIER_IS_PREPARED_ERROR = 22,
    UNSUPPORTED_CLASSIFIER_AND_METRIC_COMBINATION_ERROR = 23,
}
impl BoardIds {
    pub const FIRST: BoardIds = BoardIds::PLAYBACK_FILE_BOARD;
}
impl BoardIds {
    pub const LAST: BoardIds = BoardIds::ENOPHONE_BOARD;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BoardIds {
    PLAYBACK_FILE_BOARD = -3,
    STREAMING_BOARD = -2,
    SYNTHETIC_BOARD = -1,
    CYTON_BOARD = 0,
    GANGLION_BOARD = 1,
    CYTON_DAISY_BOARD = 2,
    GALEA_BOARD = 3,
    GANGLION_WIFI_BOARD = 4,
    CYTON_WIFI_BOARD = 5,
    CYTON_DAISY_WIFI_BOARD = 6,
    BRAINBIT_BOARD = 7,
    UNICORN_BOARD = 8,
    CALLIBRI_EEG_BOARD = 9,
    CALLIBRI_EMG_BOARD = 10,
    CALLIBRI_ECG_BOARD = 11,
    FASCIA_BOARD = 12,
    NOTION_1_BOARD = 13,
    NOTION_2_BOARD = 14,
    IRONBCI_BOARD = 15,
    GFORCE_PRO_BOARD = 16,
    FREEEEG32_BOARD = 17,
    BRAINBIT_BLED_BOARD = 18,
    GFORCE_DUAL_BOARD = 19,
    GALEA_SERIAL_BOARD = 20,
    MUSE_S_BLED_BOARD = 21,
    MUSE_2_BLED_BOARD = 22,
    CROWN_BOARD = 23,
    ANT_NEURO_EE_410_BOARD = 24,
    ANT_NEURO_EE_411_BOARD = 25,
    ANT_NEURO_EE_430_BOARD = 26,
    ANT_NEURO_EE_211_BOARD = 27,
    ANT_NEURO_EE_212_BOARD = 28,
    ANT_NEURO_EE_213_BOARD = 29,
    ANT_NEURO_EE_214_BOARD = 30,
    ANT_NEURO_EE_215_BOARD = 31,
    ANT_NEURO_EE_221_BOARD = 32,
    ANT_NEURO_EE_222_BOARD = 33,
    ANT_NEURO_EE_223_BOARD = 34,
    ANT_NEURO_EE_224_BOARD = 35,
    ANT_NEURO_EE_225_BOARD = 36,
    ENOPHONE_BOARD = 37,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IpProtocolType {
    NONE = 0,
    UDP = 1,
    TCP = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FilterTypes {
    BUTTERWORTH = 0,
    CHEBYSHEV_TYPE_1 = 1,
    BESSEL = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AggOperations {
    MEAN = 0,
    MEDIAN = 1,
    EACH = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum WindowFunctions {
    NO_WINDOW = 0,
    HANNING = 1,
    HAMMING = 2,
    BLACKMAN_HARRIS = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum DetrendOperations {
    NONE = 0,
    CONSTANT = 1,
    LINEAR = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BrainFlowMetrics {
    RELAXATION = 0,
    CONCENTRATION = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BrainFlowClassifiers {
    REGRESSION = 0,
    KNN = 1,
    SVM = 2,
    LDA = 3,
}
#[repr(i32)]
#[doc = " LogLevels enum to store all possible log levels"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum LogLevels {
    LEVEL_TRACE = 0,
    #[doc = " TRACE"]
    LEVEL_DEBUG = 1,
    #[doc = " DEBUG"]
    LEVEL_INFO = 2,
    #[doc = " INFO"]
    LEVEL_WARN = 3,
    #[doc = " WARN"]
    LEVEL_ERROR = 4,
    #[doc = " ERROR"]
    LEVEL_CRITICAL = 5,
    #[doc = " CRITICAL"]
    LEVEL_OFF = 6,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NoiseTypes {
    FIFTY = 0,
    SIXTY = 1,
}
extern "C" {
    pub fn get_board_descr(
        board_id: ::std::os::raw::c_int,
        board_descr: *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_sampling_rate(
        board_id: ::std::os::raw::c_int,
        sampling_rate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_package_num_channel(
        board_id: ::std::os::raw::c_int,
        package_num_channel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_timestamp_channel(
        board_id: ::std::os::raw::c_int,
        timestamp_channel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_marker_channel(
        board_id: ::std::os::raw::c_int,
        marker_channel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_battery_channel(
        board_id: ::std::os::raw::c_int,
        battery_channel: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_num_rows(
        board_id: ::std::os::raw::c_int,
        num_rows: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_eeg_names(
        board_id: ::std::os::raw::c_int,
        eeg_names: *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_exg_channels(
        board_id: ::std::os::raw::c_int,
        exg_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_eeg_channels(
        board_id: ::std::os::raw::c_int,
        eeg_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_emg_channels(
        board_id: ::std::os::raw::c_int,
        emg_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_ecg_channels(
        board_id: ::std::os::raw::c_int,
        ecg_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_eog_channels(
        board_id: ::std::os::raw::c_int,
        eog_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_ppg_channels(
        board_id: ::std::os::raw::c_int,
        ppg_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_eda_channels(
        board_id: ::std::os::raw::c_int,
        eda_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_accel_channels(
        board_id: ::std::os::raw::c_int,
        accel_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_analog_channels(
        board_id: ::std::os::raw::c_int,
        analog_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_gyro_channels(
        board_id: ::std::os::raw::c_int,
        gyro_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_other_channels(
        board_id: ::std::os::raw::c_int,
        other_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_temperature_channels(
        board_id: ::std::os::raw::c_int,
        temperature_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_resistance_channels(
        board_id: ::std::os::raw::c_int,
        resistance_channels: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_device_name(
        board_id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prepare_session(
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_stream(
        buffer_size: ::std::os::raw::c_int,
        streamer_params: *const ::std::os::raw::c_char,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stop_stream(
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn release_session(
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_current_board_data(
        num_samples: ::std::os::raw::c_int,
        data_buf: *mut f64,
        returned_samples: *mut ::std::os::raw::c_int,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_board_data_count(
        result: *mut ::std::os::raw::c_int,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_board_data(
        data_count: ::std::os::raw::c_int,
        data_buf: *mut f64,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn config_board(
        config: *mut ::std::os::raw::c_char,
        response: *mut ::std::os::raw::c_char,
        response_len: *mut ::std::os::raw::c_int,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_prepared(
        prepared: *mut ::std::os::raw::c_int,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insert_marker(
        marker_value: f64,
        board_id: ::std::os::raw::c_int,
        json_brainflow_input_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_log_level(log_level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_log_file(log_file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn log_message(
        log_level: ::std::os::raw::c_int,
        message: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNINativeInterface {
    _unused: [u8; 0],
}
pub type JNIEnv = *const JNINativeInterface;
extern "C" {
    pub fn java_set_jnienv(java_jnienv: *mut JNIEnv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_lowpass(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        sampling_rate: ::std::os::raw::c_int,
        cutoff: f64,
        order: ::std::os::raw::c_int,
        filter_type: ::std::os::raw::c_int,
        ripple: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_highpass(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        sampling_rate: ::std::os::raw::c_int,
        cutoff: f64,
        order: ::std::os::raw::c_int,
        filter_type: ::std::os::raw::c_int,
        ripple: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_bandpass(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        sampling_rate: ::std::os::raw::c_int,
        center_freq: f64,
        band_width: f64,
        order: ::std::os::raw::c_int,
        filter_type: ::std::os::raw::c_int,
        ripple: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_bandstop(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        sampling_rate: ::std::os::raw::c_int,
        center_freq: f64,
        band_width: f64,
        order: ::std::os::raw::c_int,
        filter_type: ::std::os::raw::c_int,
        ripple: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove_environmental_noise(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        sampling_rate: ::std::os::raw::c_int,
        noise_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_rolling_filter(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        period: ::std::os::raw::c_int,
        agg_operation: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_downsampling(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        period: ::std::os::raw::c_int,
        agg_operation: ::std::os::raw::c_int,
        output_data: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_wavelet_transform(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        wavelet: *const ::std::os::raw::c_char,
        decomposition_level: ::std::os::raw::c_int,
        output_data: *mut f64,
        decomposition_lengths: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_inverse_wavelet_transform(
        wavelet_coeffs: *mut f64,
        original_data_len: ::std::os::raw::c_int,
        wavelet: *const ::std::os::raw::c_char,
        decomposition_level: ::std::os::raw::c_int,
        decomposition_lengths: *mut ::std::os::raw::c_int,
        output_data: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_wavelet_denoising(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        wavelet: *const ::std::os::raw::c_char,
        decomposition_level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_csp(
        data: *const f64,
        labels: *const f64,
        n_epochs: ::std::os::raw::c_int,
        n_channels: ::std::os::raw::c_int,
        n_times: ::std::os::raw::c_int,
        output_w: *mut f64,
        output_d: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_window(
        window_function: ::std::os::raw::c_int,
        window_len: ::std::os::raw::c_int,
        output_window: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_fft(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        window_function: ::std::os::raw::c_int,
        output_re: *mut f64,
        output_im: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perform_ifft(
        input_re: *mut f64,
        input_im: *mut f64,
        data_len: ::std::os::raw::c_int,
        restored_data: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_nearest_power_of_two(
        value: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_psd(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        sampling_rate: ::std::os::raw::c_int,
        window_function: ::std::os::raw::c_int,
        output_ampl: *mut f64,
        output_freq: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn detrend(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        detrend_operation: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_psd_welch(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        nfft: ::std::os::raw::c_int,
        overlap: ::std::os::raw::c_int,
        sampling_rate: ::std::os::raw::c_int,
        window_function: ::std::os::raw::c_int,
        output_ampl: *mut f64,
        output_freq: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_band_power(
        ampl: *mut f64,
        freq: *mut f64,
        data_len: ::std::os::raw::c_int,
        freq_start: f64,
        freq_end: f64,
        band_power: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_avg_band_powers(
        raw_data: *mut f64,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        sampling_rate: ::std::os::raw::c_int,
        apply_filters: ::std::os::raw::c_int,
        avg_band_powers: *mut f64,
        stddev_band_powers: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_file(
        data: *const f64,
        num_rows: ::std::os::raw::c_int,
        num_cols: ::std::os::raw::c_int,
        file_name: *const ::std::os::raw::c_char,
        file_mode: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_file(
        data: *mut f64,
        num_rows: *mut ::std::os::raw::c_int,
        num_cols: *mut ::std::os::raw::c_int,
        file_name: *const ::std::os::raw::c_char,
        num_elements: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_num_elements_in_file(
        file_name: *const ::std::os::raw::c_char,
        num_elements: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prepare(json_params: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn predict(
        data: *mut f64,
        data_len: ::std::os::raw::c_int,
        output: *mut f64,
        json_params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn release(json_params: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
