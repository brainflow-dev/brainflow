/* automatically generated by rust-bindgen 0.59.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    extern "C" {
        pub fn get_board_descr(
            board_id: ::std::os::raw::c_int,
            board_descr: *mut ::std::os::raw::c_char,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_sampling_rate(
            board_id: ::std::os::raw::c_int,
            sampling_rate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_package_num_channel(
            board_id: ::std::os::raw::c_int,
            package_num_channel: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_timestamp_channel(
            board_id: ::std::os::raw::c_int,
            timestamp_channel: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_marker_channel(
            board_id: ::std::os::raw::c_int,
            marker_channel: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_battery_channel(
            board_id: ::std::os::raw::c_int,
            battery_channel: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_num_rows(
            board_id: ::std::os::raw::c_int,
            num_rows: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_eeg_names(
            board_id: ::std::os::raw::c_int,
            eeg_names: *mut ::std::os::raw::c_char,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_exg_channels(
            board_id: ::std::os::raw::c_int,
            exg_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_eeg_channels(
            board_id: ::std::os::raw::c_int,
            eeg_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_emg_channels(
            board_id: ::std::os::raw::c_int,
            emg_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_ecg_channels(
            board_id: ::std::os::raw::c_int,
            ecg_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_eog_channels(
            board_id: ::std::os::raw::c_int,
            eog_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_ppg_channels(
            board_id: ::std::os::raw::c_int,
            ppg_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_eda_channels(
            board_id: ::std::os::raw::c_int,
            eda_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_accel_channels(
            board_id: ::std::os::raw::c_int,
            accel_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_analog_channels(
            board_id: ::std::os::raw::c_int,
            analog_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_gyro_channels(
            board_id: ::std::os::raw::c_int,
            gyro_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_other_channels(
            board_id: ::std::os::raw::c_int,
            other_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_temperature_channels(
            board_id: ::std::os::raw::c_int,
            temperature_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_resistance_channels(
            board_id: ::std::os::raw::c_int,
            resistance_channels: *mut ::std::os::raw::c_int,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_device_name(
            board_id: ::std::os::raw::c_int,
            name: *mut ::std::os::raw::c_char,
            len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn prepare_session(
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn start_stream(
            buffer_size: ::std::os::raw::c_int,
            streamer_params: *const ::std::os::raw::c_char,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn stop_stream(
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn release_session(
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_current_board_data(
            num_samples: ::std::os::raw::c_int,
            data_buf: *mut f64,
            returned_samples: *mut ::std::os::raw::c_int,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_board_data_count(
            result: *mut ::std::os::raw::c_int,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_board_data(
            data_count: ::std::os::raw::c_int,
            data_buf: *mut f64,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn config_board(
            config: *mut ::std::os::raw::c_char,
            response: *mut ::std::os::raw::c_char,
            response_len: *mut ::std::os::raw::c_int,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn is_prepared(
            prepared: *mut ::std::os::raw::c_int,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn insert_marker(
            marker_value: f64,
            board_id: ::std::os::raw::c_int,
            json_brainflow_input_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn set_log_level(log_level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn set_log_file(log_file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn log_message(
            log_level: ::std::os::raw::c_int,
            message: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct JNINativeInterface {
        _unused: [u8; 0],
    }
    pub type JNIEnv = *const root::JNINativeInterface;
    extern "C" {
        pub fn java_set_jnienv(java_jnienv: *mut root::JNIEnv) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_lowpass(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            sampling_rate: ::std::os::raw::c_int,
            cutoff: f64,
            order: ::std::os::raw::c_int,
            filter_type: ::std::os::raw::c_int,
            ripple: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_highpass(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            sampling_rate: ::std::os::raw::c_int,
            cutoff: f64,
            order: ::std::os::raw::c_int,
            filter_type: ::std::os::raw::c_int,
            ripple: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_bandpass(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            sampling_rate: ::std::os::raw::c_int,
            center_freq: f64,
            band_width: f64,
            order: ::std::os::raw::c_int,
            filter_type: ::std::os::raw::c_int,
            ripple: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_bandstop(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            sampling_rate: ::std::os::raw::c_int,
            center_freq: f64,
            band_width: f64,
            order: ::std::os::raw::c_int,
            filter_type: ::std::os::raw::c_int,
            ripple: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn remove_environmental_noise(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            sampling_rate: ::std::os::raw::c_int,
            noise_type: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_rolling_filter(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            period: ::std::os::raw::c_int,
            agg_operation: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_downsampling(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            period: ::std::os::raw::c_int,
            agg_operation: ::std::os::raw::c_int,
            output_data: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_wavelet_transform(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            wavelet: *const ::std::os::raw::c_char,
            decomposition_level: ::std::os::raw::c_int,
            output_data: *mut f64,
            decomposition_lengths: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_inverse_wavelet_transform(
            wavelet_coeffs: *mut f64,
            original_data_len: ::std::os::raw::c_int,
            wavelet: *const ::std::os::raw::c_char,
            decomposition_level: ::std::os::raw::c_int,
            decomposition_lengths: *mut ::std::os::raw::c_int,
            output_data: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_wavelet_denoising(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            wavelet: *const ::std::os::raw::c_char,
            decomposition_level: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_csp(
            data: *const f64,
            labels: *const f64,
            n_epochs: ::std::os::raw::c_int,
            n_channels: ::std::os::raw::c_int,
            n_times: ::std::os::raw::c_int,
            output_w: *mut f64,
            output_d: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_window(
            window_function: ::std::os::raw::c_int,
            window_len: ::std::os::raw::c_int,
            output_window: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_fft(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            window_function: ::std::os::raw::c_int,
            output_re: *mut f64,
            output_im: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perform_ifft(
            input_re: *mut f64,
            input_im: *mut f64,
            data_len: ::std::os::raw::c_int,
            restored_data: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_nearest_power_of_two(
            value: ::std::os::raw::c_int,
            output: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_psd(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            sampling_rate: ::std::os::raw::c_int,
            window_function: ::std::os::raw::c_int,
            output_ampl: *mut f64,
            output_freq: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn detrend(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            detrend_operation: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_psd_welch(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            nfft: ::std::os::raw::c_int,
            overlap: ::std::os::raw::c_int,
            sampling_rate: ::std::os::raw::c_int,
            window_function: ::std::os::raw::c_int,
            output_ampl: *mut f64,
            output_freq: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_band_power(
            ampl: *mut f64,
            freq: *mut f64,
            data_len: ::std::os::raw::c_int,
            freq_start: f64,
            freq_end: f64,
            band_power: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_avg_band_powers(
            raw_data: *mut f64,
            rows: ::std::os::raw::c_int,
            cols: ::std::os::raw::c_int,
            sampling_rate: ::std::os::raw::c_int,
            apply_filters: ::std::os::raw::c_int,
            avg_band_powers: *mut f64,
            stddev_band_powers: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn write_file(
            data: *const f64,
            num_rows: ::std::os::raw::c_int,
            num_cols: ::std::os::raw::c_int,
            file_name: *const ::std::os::raw::c_char,
            file_mode: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn read_file(
            data: *mut f64,
            num_rows: *mut ::std::os::raw::c_int,
            num_cols: *mut ::std::os::raw::c_int,
            file_name: *const ::std::os::raw::c_char,
            num_elements: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn get_num_elements_in_file(
            file_name: *const ::std::os::raw::c_char,
            num_elements: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn prepare(json_params: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn predict(
            data: *mut f64,
            data_len: ::std::os::raw::c_int,
            output: *mut f64,
            json_params: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn release(json_params: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
}
